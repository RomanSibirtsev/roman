import numpy as np
from sklearn.decomposition import PCA
from sklearn.datasets import load_iris
import matplotlib.pyplot as plt
from sklearn.svm import SVC

def polynom(x, theta):
    return sum([theta[i] * x**i for i in range(len(theta))])
    result = 0
    for i in range(len(theta)):
        result += theta[i] * x**i
    return result



full_data = load_iris()
X = full_data["data"]
y = full_data["target"]
y_train = np.array(list(y[y == 1]) + list(y[y == 2]))
print(y_train)
X_train = np.array([X[i] for i in range(len(y_train))])
model = PCA(n_components=2)
model.fit(X_train)
X_2d = model.transform(X_train)

clf = SVC(kernel='linear')
clf.fit(X_train,y_train)
y_pred = clf.predict(X_train)


K = 1
N = len(X_train)
a = -2
b = 2
X = np.array([[y_train[i]**j for j in range(K + 1)] for i in range(N)])
y = np.array(y_pred)
theta = np.linalg.lstsq(X, y, rcond=None)[0]

print(theta)


xs_draw = np.arange(a, b, 0.01)
ys_draw = [polynom(x, theta) for x in xs_draw]
plt.plot(xs_draw, ys_draw)

#plt.plot(y_train , y_pred)
plt.plot(X_2d[y_train == 1][:, 0], X_2d[y_train == 1][:, 1], "o")
plt.plot(X_2d[y_train == 2][:, 0], X_2d[y_train == 2][:, 1], "o")
plt.show()
