class Polynom:
    def __init__(self, coeffs):
        self.coeffs = coeffs
        self.deg = len(coeffs) - 1

    def __mul__(self, other):
        if type(other) in [float, int]:
            return Polynom(list(map(lambda x: x*other, self.coeffs)))
        else:
            print("Sorry")

    def __neg__(self):
        return self*(-1)

    def __str__(self):
        res = ""
        for i in range(self.deg + 1):
            c = self.coeffs[-1 - i]
            if c == 0:
                continue
            elif c == 1:
                res += "+ x^{} ".format(self.deg - i)
            elif c == -1:
                res += "- x^{} ".format(self.deg - i)
            elif c > 0:
                res += "+ {:.2f}*x^{} ".format(c, self.deg - i)
            elif c < 0:
                res += "- {:.2f}*x^{} ".format(-c, self.deg - i)

        return res.strip("+ ")

    def __divmod__(self, other):
        mod = Polynom(list(self.coeffs))
        div_deg = mod.deg - other.deg
        div_coeffs = []

        while mod.deg >= other.deg:
            c = mod.coeffs[-1] / other.coeffs[-1]
            div_coeffs.append(c)

            for i in range(other.deg + 1):
                mod.coeffs[-1 - i] -= c * other.coeffs[-1 - i]

            zero_tail_len = 1
            for i in range(1, mod.deg + 1):
                if abs(mod.coeffs[-1 - i]) <= 10**(-9):
                    zero_tail_len += 1
                else:
                    break

            prev_deg = mod.deg
            mod = Polynom(mod.coeffs[0:-zero_tail_len])
            new_deg = mod.deg

            for i in range(prev_deg - new_deg - 1):
                div_coeffs.append(0)

        div = Polynom(div_coeffs[:div_deg + 1][::-1])
        return div, mod

    def __floordiv__(self, other):
        return self.__divmod__(other)[0]

    def __mod__(self, other):
        return self.__divmod__(other)[1]

def derivative(self):
    newlist = Polynom([i for i in range(len(self.coeffs)-1)])
    for i in range(len(newlist.coeffs)):
        newlist.coeffs[i] = self.coeffs[i+1]*(i+1)
    return(newlist)

def remove_multiplicity_of_roots(self):
    return(self//gdc(derivative(self),self))

def gdc(p1, p2):
    while len(p1.coeffs) != 0 and len(p2.coeffs) != 0 :
        if(len(p1.coeffs) > len(p2.coeffs)):
            p1 = p1 % p2
        else:
            p2 = p2 % p1
    if len(p1.coeffs) == 0:
        return(p2)
    else:
        return(p1)
p1 = Polynom([1,2,3,5])
p2 = Polynom([1,2,2])

print(remove_multiplicity_of_roots(p1))

